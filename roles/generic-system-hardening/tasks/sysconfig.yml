---

- name: Create group for users allowed to SSH in
  group:
    name: "{{ deflect_ssh_allow_group_name }}"
    state: present

- set_fact: 
    ssh_logins_flatlist: "{{ ssh_logins_flatlist|default([]) + [item.login] }}"
  with_items: "{{ deflect_ssh_users }}"

- name: Add allowed users to SSH group
  user:
    name: "{{ item.login }}"
    groups: "{{ deflect_ssh_allow_group_name }}"
    state: present
    append: yes
    password: "{{ item.password | default('') }}"
    update_password: on_create
  with_items: "{{ deflect_ssh_users }}"

- name: Fetch SSH group configuration
  getent:
    database: group
    split: ':'
    key: "{{ deflect_ssh_allow_group_name }}"

- set_fact:
    ssh_logins_actual_flatlist: "{{ getent_group[deflect_ssh_allow_group_name][2].split(',') }}"

- name: Remove users that should not be allowed from SSH group
  command: "gpasswd -d {{ item }} {{ deflect_ssh_allow_group_name }}"
  with_items: "{{ ssh_logins_actual_flatlist }}"
  when: "item not in ssh_logins_flatlist"

- set_fact:
    sudo_logins_flatlist: "{{ sudo_logins_flatlist|default([]) + [item.login] }}"
  with_items: "{{ deflect_ssh_users }}"
  when: "item.sudo | default(False)"

- name: Set up SSH public keys for users
  authorized_key:
    user: "{{ item.login }}"
    key: "{{ item.pubkey }}"
    state: present
    exclusive: yes
    manage_dir: yes
  with_items: "{{ deflect_ssh_users }}"

- name: Add allowed users to sudo group
  user:
    name: "{{ item }}"
    groups: sudo
    state: present
    append: yes
  with_items: "{{ sudo_logins_flatlist }}"

- name: Fetch sudo group configuration
  getent:
    database: group
    split: ':'
    key: sudo

- set_fact:
    sudo_logins_actual_flatlist: "{{ getent_group['sudo'][2].split(',') }}"

- name: Remove users that should not be allowed from sudo group
  command: "gpasswd -d {{ item }} sudo"
  with_items: "{{ sudo_logins_actual_flatlist }}"
  when: "item not in sudo_logins_flatlist"

- name: Install sshd_config
  template:
    src: sshd_config.j2
    dest: /etc/ssh/sshd_config
    owner: root
    group: root
    mode: "0644"
  notify: ["restart sshd"]

- name: Force password update for users where it is specified to do so
  user:
    name: "{{ item.login }}"
    state: present
    password: "{{ item.password }}"
    update_password: always
  with_items: "{{ deflect_ssh_users }}"
  when: "item.password is defined and item.force_password is defined and item.force_password == True"
   
